#coding:gb2312
'''
leetcode: Longest Palindromic Substring
'''

class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """

        if len(s) == 0 or len(s) == 1:
            return s

        max_length = 1 # 存储最大长度的回文字符串
        start = 0 # 存储字符串的起始位置
        i = 0

        while i < len(s):
            # 以i为中心扩展回文字符串
            j = i
            k = i

            # 与中心字符相同的字符肯定出现在回文字符串中,所以要将边界后移
            i += 1
            while i < len(s) and s[i] == s[k]:
                i += 1

            k = i - 1

            while j > 0 and k < len(s) - 1 and s[j - 1] == s[k + 1]:
                j -= 1
                k += 1

            if k - j + 1 > max_length:
                max_length = k - j + 1
                start = j

        return s[start:start + max_length]

        '''
        S_list = [] #用于存储处理后的字符串

        #针对字符串进行加'$'和'#'的处理
        S_list.append('$')
        for i in range(len(s)):
            S_list.append('#')
            S_list.append(s[i])
        S_list.append('#')

        #调用Manacher算法
        return self.Manacher(S_list)

    def Manacher(self, S_list):
        P = [] #存储以S_list中每一个字符为中心的回文串的长度
        for i in range(len(S_list)):
            P.append(0)

        mx = 0 #存储最长回文子串的边界
        id = 0 #最长回文子串的中心位置
        for i in range(1, len(S_list)):
            if mx > i:
                if P[2 * id - i] < (mx - 1):
                    P[i] = P[2 * id - i]
                else:
                    P[i] = mx - 1
            else:
                P[i] = 1

            #试图扩大以i为中心的回文串的长度
            while i + P[i] < len(S_list) and i - P[i] >= 0 and S_list[i + P[i]] == S_list[i - P[i]]:
                P[i] += 1

            #更改最长回文子串的长度以及中心信息
            if P[i] + i > mx:
                mx = P[i]
                id = i
            if mx == len(S_list) / 2:
                return mx - 1

        #求出最长回文子串的长度
        return mx - 1
        '''
if __name__ == '__main__':
    sol = Solution()
    print(sol.longestPalindrome('bb'))