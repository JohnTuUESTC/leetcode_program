#coding:gb2312
'''
leetcode Swap Nodes in Pairs
'''

# Definition for singly-linked list.
class ListNode(object):
    def __init__(self, x):
        self.val = x
        self.next = None

class Solution(object):
    def swapPairs(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        '''
        #如果链表为空,或链表中只有一个结点
        if not head or not head.next:
            return head

        # 提前存储链表的头结点
        new_head = head.next

        pre = None
        now = head
        next = head.next

        while now and next:

            #交换相邻两个结点的位置
            now.next = next.next
            next.next = now

            if pre:
                pre.next = next

            # 如果now之后没有元素,可以提前退出了
            if not now.next:
                break

            next = now.next.next
            pre = now
            now = now.next

        return new_head
        '''

        '''
        # 奇技淫巧
        temp = head # 这里赋值为head是为了防止最后剩单个元素的情况

        if head and head.next:
            temp = head.next
            head.next = self.swapPairs(temp.next)
            temp.next = head

        return temp
        '''
        # 非常漂亮
        pre, pre.next = self, head
        while pre.next and pre.next.next:
            a = pre.next
            b = a.next
            pre.next, b.next, a.next = b, a, b.next
            pre = a
        return self.next

if __name__ == "__main__":
    sol = Solution()
    l = ListNode(1)
    l.next = ListNode(2)
    temp_l = l.next
    temp_l.next = ListNode(3)
    temp_l = temp_l.next
    temp_l.next = ListNode(4)
    l1 = sol.swapPairs(l)

    while l1:
        print(l1.val)
        l1 = l1.next