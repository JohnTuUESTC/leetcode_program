#coding:gb2312
'''
leetcode: Minimum Window Substring
'''

import copy

class Solution(object):
    def minWindow(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: str
        """

        if len(s) == 0 or len(t) == 0:
            return ""

        character_num = {} # 记录字符串t中每个字符出现的个数
        for i in range(len(t)):
            if character_num.has_key(t[i]):
                character_num[t[i]] += 1
            else:
                character_num[t[i]] = 1

        # 记录最小窗口的信息
        min_length = len(s) + 1
        first_index = -1

        temp_character_num = {}
        left = 0 # 表示一个窗口的起始位置
        count = 0 # 表示当前已经找到的字符的个数

        for i in range(len(s)):
            if s[i] in character_num: # 判断当前字符是否是在字符串t中
                if count == 0:
                    left = i

                if s[i] in temp_character_num:
                    temp_character_num[s[i]] += 1
                else:
                    temp_character_num[s[i]] = 1

                # 将找到的字符数加1,为了避免计算冗余的字符
                if temp_character_num[s[i]] <= character_num[s[i]]:
                    count += 1

                # 表示已经寻找到了这样的一个窗口
                # 在去除冗余字符的过程中,可能会发现更小的窗口,所以使用while
                while count == len(t):
                    if i - left + 1 < min_length:
                        min_length = i - left + 1
                        first_index = left

                    temp_character_num[s[left]] -= 1
                    # 这里去除的可能是冗余的字符
                    if temp_character_num[s[left]] < character_num[s[left]]:
                        count -= 1

                    left += 1

                    while left < len(s):
                        # 为了保证窗口的开始字符是t中的字符
                        if s[left] not in character_num:
                            left += 1
                        # 尽量将冗余的字符去掉,以缩短窗口的大小
                        elif temp_character_num[s[left]] > character_num[s[left]]:
                            temp_character_num[s[left]] -= 1
                            left += 1
                        else:
                            break

        if count == len(t):
            if len(s) - left < min_length:
                min_length = len(s) - left
                first_index = left

        if first_index == -1:
            return ""
        else:
            return s[first_index:first_index + min_length]

if __name__ == "__main__":
    sol = Solution()
    print(sol.minWindow("bbaac", "aba"))