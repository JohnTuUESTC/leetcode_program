#coding:gb2312

'''
leetcode: Simplify Path
'''

class Solution(object):
    def simplifyPath(self, path):
        """
        :type path: str
        :rtype: str
        """
        '''
        index = 1  # 表示当前扫描的位置
        file_stack = []  # 记录文件路径的信息

        while index < len(path):
            # 如果是字符'/'，则跳过
            if path[index] == '/':
                index += 1
                continue

            # 如果是当前目录的符号
            if index + 1 < len(path) and path[index] == '.' and path[index + 1] == '/':
                index += 2
                continue
            elif index == len(path) - 1 and path[index] == '.':
                break

            # 如果是返回上一级目录的符号
            if index + 2 < len(path) and path[index] == '.' and path[index + 1] == '.' and path[index + 2] == '/':
                index += 3
                if len(file_stack) > 0:
                    file_stack.pop()
                continue
            elif index == len(path) - 2 and path[index] == '.' and path[index + 1] == '.':
                if len(file_stack) > 0:
                    file_stack.pop()
                break

            #获取文件夹名的长度
            length = 1
            while index + length < len(path):
                if path[index + length] == '/':
                    break
                length += 1

            file_stack.append(path[index:index+length])
            index += length

        return '/' + '/'.join(file_stack)
        '''

        file_stack = []  # 记录文件路径的信息

        file = [i for i in path.split('/') if i != '.' and i != ''] # 以'/'作为分隔符,除去当前目录的符号

        for file_name in file:
            if file_name == '..':
                if len(file_stack) > 0:
                    file_stack.pop()
            else:
                file_stack.append(file_name)

        return '/' + '/'.join(file_stack)


if __name__ == '__main__':
    sol = Solution()
    print(sol.simplifyPath('/..hidden'))

