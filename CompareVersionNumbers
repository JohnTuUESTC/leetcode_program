#coding:gb2312
'''
leetcode: Compare Version Numbers
'''

class Solution(object):
    def compareVersion(self, version1, version2):
        """
        :type version1: str
        :type version2: str
        :rtype: int
        """

        version1_num = [] #存储version1各个'.'之间的数字
        version2_num = [] #存储version2各个'.'之间的数字
        first = 0
        last = 0

        #分隔各个'.'之间的数字
        while last < len(version1):
            if version1[last] == '.':
                version1_num.append(int(version1[first : last]))
                first = last + 1
            last += 1

        version1_num.append(int(version1[first : last]))

        first = 0
        last = 0
        while last < len(version2):
            if version2[last] == '.':
                version2_num.append(int(version2[first : last]))
                first = last + 1
            last += 1

        version2_num.append(int(version2[first : last]))

        if len(version1_num) == 0 or len(version2_num) == 0:
            return 0

        #比较两个版本
        min_length = 0
        if len(version1_num) > len(version2_num):
            min_length = len(version2_num)
        else:
            min_length = len(version1_num)

        for i in range(min_length):
            if version1_num[i] > version2_num[i]:
                return 1
            elif version1_num[i] < version2_num[i]:
                return -1

        #如果在相同长度内的数字都相同，则比较其余数字
        #如果两者的长度也相同，则相等
        if len(version1_num) == len(version2_num):
            return 0
        #判断剩余长度内的非零数字
        elif min_length == len(version1_num):
            for i in range(len(version1_num), len(version2_num)):
                if version2_num[i] > 0:
                    return -1
            return 0
        else:
            for i in range(len(version2_num), len(version1_num)):
                if version1_num[i] > 0:
                    return 1
            return 0

if __name__ == '__main__':
    sol = Solution()
    print(sol.compareVersion('1.1', '1'))