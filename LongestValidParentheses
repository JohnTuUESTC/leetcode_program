#coding:gb2312

'''
leetcode: Longest Valid Parentheses
'''

class Solution(object):
    def longestValidParentheses(self, s):
        """
        :type s: str
        :rtype: int
        """
        '''
        if len(s) == 0 or len(s) == 1:
            return 0

        length = [] #用于保存s中每一项括号匹配的长度

        for i in range(len(s)):
            length.append(0)

        #倒序计算s中每一项括号匹配的长度
        for i in range(len(s) - 2, -1, -1):
            if s[i] == '(':

                #跳过第i+1个字符括号匹配的长度去判断是否有右括号与当前括号匹配
                j = i + 1 + length[i + 1]

                #如果是一个有效的括号匹配,则增加第i个字符括号匹配的长度
                if j < len(s) and s[j] == ')':
                    length[i] = length[i + 1] + 2

                    #如果j之后还有字符,则还可以加上第j + 1个字符括号匹配的长度
                    if j + 1 < len(s):
                        length[i] += length[j + 1]
        return max(length)
        '''
        if len(s) == 0 or len(s) == 1:
            return 0

        stack = [] # 用于模拟括号匹配的堆栈
        index = [0] * (len(s) + 1) # 存储匹配的括号的长度

        for i in range(len(s)):
            if s[i] == '(': # 每一次只将左括号压入栈中
                stack.append(i)
            elif len(stack) != 0: # 如果碰到右括号且栈非空,表示有括号可以匹配
                temp_index = stack.pop()
                index[i + 1] = index[temp_index] + i - temp_index + 1 # 在本次括号匹配长度的基础之上加上最左边右括号匹配的长度

        return max(index)

if __name__ == '__main__':
    sol = Solution()
    print(sol.longestValidParentheses(')()())'))