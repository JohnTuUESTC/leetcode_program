#coding:gb2312
'''
leetcode Remove Nth Node From End of List
'''

# Definition for singly-linked list.
class ListNode(object):
    def __init__(self, x):
        self.val = x
        self.next = None

class Solution(object):
    def removeNthFromEnd(self, head, n):
        """
        :type head: ListNode
        :type n: int
        :rtype: ListNode
        """

        #如果是空链表的话，直接返回
        if not head:
            return head

        if n == 0:
            return head

        #计算链表的长度
        list_len = 0
        temp_head = head

        while temp_head:
            list_len += 1
            temp_head = temp_head.next

        #如果需要删除的结点的位置等于链表的长度
        if n == list_len:
            return head.next

        #将倒数第n个结点删除
        index = list_len
        temp_head = head

        while temp_head:
            if index == n+1:
                temp_head.next = temp_head.next.next
                break

            index -= 1
            temp_head = temp_head.next

        return head

if __name__ == "__main__":
    sol = Solution()
    l = ListNode(1)
    l.next = ListNode(2)
    temp_l=l.next
    temp_l.next = ListNode(3)
    temp_l = temp_l.next
    temp_l.next = ListNode(4)
    temp_l = temp_l.next
    temp_l.next = ListNode(5)

    l1 = sol.removeNthFromEnd(l, 2)

    while l1:
        print(l1.val)
        l1 = l1.next

