#coding:gb2312
'''
leetcode Vaild Parentheses
'''

class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """

        #如果输入的字符串为空
        if not s:
            return True

        #如果输入的字符串的长度为奇数
        if len(s) % 2 == 1:
            return False

        '''
        index = 0 #表示遍历的位置
        bracket_stack = []

        while index < len(s):
            if len(bracket_stack) == 0:
                bracket_stack.append(s[index])
            else:
                if bracket_stack[len(bracket_stack) - 1] == '(' and s[index] == ')':
                    bracket_stack.pop()
                elif bracket_stack[len(bracket_stack) - 1] == '[' and s[index] == ']':
                    bracket_stack.pop()
                elif bracket_stack[len(bracket_stack) - 1] == '{' and s[index] == '}':
                    bracket_stack.pop()
                else:
                    bracket_stack.append(s[index])

            index += 1

        if len(bracket_stack) == 0:
            return True
        else:
            return False
        '''

        length = [0] * len(s) # 表示匹配的长度

        for i in range(len(s) - 2, -1, -1):
            j = i + 1 + length[i + 1]

            if j < len(s) and ((s[i] == "(" and s[j] == ")") or (s[i] == "[" and s[j] == "]") or (s[i] == "{" and s[j] == "}")):
                length[i] = length[i + 1] + 2

                if j + 1 < len(s):
                    length[i] += length[j + 1]

        if length[0] == len(s):
            return True
        else:
            return False


if __name__ == "__main__":
    sol = Solution()
    print(sol.isValid("(()){{}}"))