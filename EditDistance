#coding:gb2312
'''
leetcode: Edit Distance
'''

class Solution(object):
    def minDistance(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: int
        """
        edit_distance = [([0] * (len(word2) + 1)) for i in range(len(word1) + 1)] #保存两个字符串间的编辑距离

        for i in range(len(word1) + 1):
            edit_distance[i][0] = i
        for j in range(len(word2) + 1):
            edit_distance[0][j] = j

        for i in range(0, len(word1)):
            for j in range(0, len(word2)):
                # 如果当前的两个字符相同
                if word1[i] == word2[j]:
                    edit_distance[i + 1][j + 1] = edit_distance[i][j]
                else: # 否则就需要动用三个操作中的一种来使其匹配
                    method_1 = edit_distance[i + 1][j] # 表示使用插入操作
                    method_2 = edit_distance[i][j + 1] # 表示使用删除操作
                    method_3 = edit_distance[i][j] # 表示使用替换操作

                    temp_min_1 = min(method_1, method_2)
                    temp_min_2 = min(temp_min_1, method_3)

                    edit_distance[i + 1][j + 1] = temp_min_2 + 1

        return edit_distance[len(word1)][len(word2)]

if __name__ == '__main__':
    sol = Solution()
    print(sol.minDistance('sea', 'ate'))